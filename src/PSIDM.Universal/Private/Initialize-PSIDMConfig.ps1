function Initialize-PSIDMConfig {
    <#
    .SYNOPSIS
        Initializes the PSIDM configuration files with default values.
    .DESCRIPTION
        The Initialize-PSIDMConfig function initializes the PSIDM configuration
        files with default values. If the configuration files already exist, the
        function will throw an error unless the -Force switch is used.

        If the configuration files do not exist, the function will initialize them
        from templates in Private\resources.
    .PARAMETER Force
        If specified, any existing configuration files will be overwritten with
        the values generated by this function.
    .PARAMETER PassThru
        If specified, the final merged configuration will be returned to the
        caller.
    .EXAMPLE
        PS C:\> Initialize-PSIDMConfig -Force
        This will initialize the PSIDM configuration files with default values.
    .INPUTS
        None
    .OUTPUTS
        Hashtable
    .NOTES
        Currently tightly coupled with the Get-ConfigFileMap function. If more
        config files are added, this function will need to be updated.
    #>
    [CmdletBinding()]
    param(
        [switch] $Force,
        [switch] $PassThru
    )

    process{
        # @TODO: Decouple this from Get-ConfigFileMap. Convention over configuration,
        #        config file defaults are always in Private\resources, so can this
        #        be done a little more dynamically?
        $moduleRoot     = (Resolve-Path ([System.IO.Path]::Combine($PSScriptRoot, '..'))).Path
        $configRoot     = Join-Path $moduleRoot -ChildPath 'conf'
        $resourceRoot   = Join-Path $moduleRoot -ChildPath 'Private\resources'
        $configFileMap  = Get-ConfigFileMap
        Write-Debug "Module root: $moduleRoot"
        Write-Debug "Config root: $configRoot"
        Write-Debug "Resource root: $resourceRoot"

        Write-Debug "Testing existence of $($configFileMap['Module'])"
        if (-not (Test-Path $configFileMap['Module']) -or $Force) {
            Write-Verbose "Module config file ($($configFileMap['Module'])) does not exist, or Initialize-PSIDMConfig called with -Force."
            $moduleCfg = Get-Content (Join-Path $resourceRoot -ChildPath 'config.json.tpl') -Raw | ConvertFrom-Json

            Write-Verbose "Initializing configuration with default values."
            Write-Verbose "Setting up Active Directory configuration using Get-ADDomain."
            try {
                $ADDomain   = Get-ADDomain -ErrorAction Stop
                $moduleCfg.AD.Domain.Name      = $ADDomain.Name
                $moduleCfg.AD.Domain.DNSRoot   = $ADDomain.DNSRoot
            }
            catch {
                Write-Warning "Unable to get Active Directory domain information. Please set the 'AD.Domain' configuration values manually."
                Write-Error "The specific error returned was: $_"
            }

            Write-Verbose "Setting up Paths configuration."
            $moduleCfg.Paths.ModuleRoot    = $moduleRoot
            $moduleCfg.Paths.ConfigRoot    = $configRoot
            $moduleCfg.Paths.PageRoot      = Join-Path $moduleRoot -ChildPath 'Public\pages'
            $moduleCfg.Paths.ScriptRoot    = Join-Path $moduleRoot -ChildPath 'Public\scripts'
            $moduleCfg.Paths.JobRoot       = Join-Path $moduleRoot -ChildPath 'Public\jobs'

            Write-Debug "Writing module configuration to $($configFileMap['Module'])"
            Write-Debug "Module configuration (JSON representation): $($moduleCfg | ConvertTo-Json)"

            try {
                $moduleCfg | ConvertTo-Json | Set-Content -Path $configFileMap['Module'] -Force -ErrorAction Stop
            }
            catch {
                throw "Failed to write Module configuration to $($configFileMap['Module']). Error: $_"
            }

            Write-Warning "Module configuration has been set from default values. Please review the configuration file at $($configFileMap['Module']) and make any necessary changes."
        }


        Write-Debug "Testing existence of $($configFileMap['Jobs'])"
        if (-not (Test-Path $configFileMap['Jobs'])) {
            Write-Verbose "Jobs config file ($($configFileMap['Jobs'])) does not exist, or Initialize-PSIDMConfig called with -Force."
            Write-Verbose "Initializing configuration with default values."
            $jobsCfg = Get-Content (Join-Path $resourceRoot -ChildPath 'jobs.json.tpl') -Raw | ConvertFrom-Json

            Write-Debug "Writing jobs configuration to $($configFileMap['Jobs'])"
            Write-Debug "Module configuration (JSON representation): $($jobsCfg | ConvertTo-Json)"

            try {
                $jobsCfg | ConvertTo-Json | Set-Content -Path $configFileMap['Jobs'] -Force -ErrorAction Stop
            }
            catch {
                throw "Failed to write Jobs configuration to $($configFileMap['Jobs']). Error: $_"
            }
            Write-Warning "Jobs configuration has been set from default values. Please review the configuration file at $($configFileMap['Jobs']) and make any necessary changes."
        }

        $moduleCfg      = Get-Content -Path $configFileMap['Module'] -Raw | ConvertFrom-Json -Depth 10
        $jobsCfg   = Get-Content -Path $configFileMap['Jobs'] -Raw | ConvertFrom-Json -Depth 10

        $mergedCfg      = @{
            Module      = $moduleCfg
            Jobs   = $jobsCfg
        }

        Set-Variable -Scope Script -Name 'PSIDM' -Value $mergedCfg -Force

        if ($PassThru) {
            $Script:PSIDM
        }
    }
}
